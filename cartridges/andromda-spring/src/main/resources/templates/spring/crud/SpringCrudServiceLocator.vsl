#if (!$manageables.empty)
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by crud/SpringCrudServiceLocator.vsl in andromda-spring-cartridge#if($dateTimeGeneratedText) on $springUtils.date#end. Do not modify by hand!. 
//
#set ($generatedFile = "${manageableServiceLocatorName}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package ${springTypesPackage};
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class ${manageableServiceLocatorName}
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "$beanRefFactory";

    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;

    /**
     * Shouldn't be instantiated
     */
    protected ${manageableServiceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ${manageableServiceLocatorName}.
     */
    private static final ${manageableServiceLocatorName} instance = new ${manageableServiceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final ${manageableServiceLocatorName} instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the context
     */
    public synchronized void init(String beanFactoryReferenceLocationIn)
    {
    }

    /**
     * Gets the Spring ApplicationContext.
     * @return beanFactoryReference.getFactory()
     */
    protected synchronized org.springframework.context.ApplicationContext getContext()
    {
        
        return ${springTypesPackage}.ApplicationContextProvider.getApplicationContext();
    }

    /**
     * Shuts down the ${manageableServiceLocatorName} and releases any used resources.
     */
    public synchronized void shutdown()
    {
        //((org.springframework.context.support.AbstractApplicationContext)this.getContext()).close();
    }
#foreach ($manageable in $manageables)

    /**
     * Gets an instance of {@link $manageable.fullyQualifiedManageableServiceName}.
     * @return getContext().getBean("$manageable.manageableServiceName")
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}()
    {
        return ($manageable.fullyQualifiedManageableServiceName)
            getContext().getBean("$manageable.manageableServiceName");
    }
#end

    // spring-crud-service-locator merge-point
}
#end
